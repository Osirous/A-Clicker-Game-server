// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSaveData = `-- name: CreateSaveData :one
INSERT INTO savedata (id, created_at, updated_at, savedata, user_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, savedata, user_id
`

type CreateSaveDataParams struct {
	Savedata []byte
	UserID   uuid.UUID
}

func (q *Queries) CreateSaveData(ctx context.Context, arg CreateSaveDataParams) (Savedatum, error) {
	row := q.db.QueryRowContext(ctx, createSaveData, arg.Savedata, arg.UserID)
	var i Savedatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Savedata,
		&i.UserID,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, username, hashed_password)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, username
`

type CreateUserParams struct {
	Username       string
	HashedPassword string
}

type CreateUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Username  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, expires_at, revoked_at, user_id
FROM refresh_tokens
WHERE user_id = $1
AND revoked_at IS NULL 
AND expires_at > NOW()
`

type GetRefreshTokenRow struct {
	Token     string
	ExpiresAt sql.NullTime
	RevokedAt sql.NullTime
	UserID    uuid.NullUUID
}

func (q *Queries) GetRefreshToken(ctx context.Context, userID uuid.NullUUID) (GetRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, userID)
	var i GetRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const getSaveData = `-- name: GetSaveData :one
SELECT id, created_at, updated_at, savedata, user_id
FROM savedata
WHERE id = $1
`

func (q *Queries) GetSaveData(ctx context.Context, id uuid.UUID) (Savedatum, error) {
	row := q.db.QueryRowContext(ctx, getSaveData, id)
	var i Savedatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Savedata,
		&i.UserID,
	)
	return i, err
}

const getSaveDataByUserID = `-- name: GetSaveDataByUserID :one
SELECT id, created_at, updated_at, savedata, user_id
FROM savedata
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetSaveDataByUserID(ctx context.Context, userID uuid.UUID) (Savedatum, error) {
	row := q.db.QueryRowContext(ctx, getSaveDataByUserID, userID)
	var i Savedatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Savedata,
		&i.UserID,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, username, hashed_password
FROM users
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :one
SELECT users.id, users.created_at, users.updated_at, users.username, users.hashed_password FROM users
JOIN refresh_tokens ON users.id = refresh_tokens.user_id
WHERE refresh_tokens.token = $1
AND revoked_at IS NULL
AND expires_at > NOW()
`

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserFromRefreshToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Username,
		&i.HashedPassword,
	)
	return i, err
}

const revokeToken = `-- name: RevokeToken :one
UPDATE refresh_tokens
SET revoked_at = NOW(), updated_at = NOW()
WHERE token = $1
RETURNING token, created_at, updated_at, user_id, expires_at, revoked_at
`

func (q *Queries) RevokeToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, revokeToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const storeRefreshToken = `-- name: StoreRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1, NOW(), NOW(), $2, $3, NULL
)
RETURNING token, created_at, updated_at, user_id, expires_at
`

type StoreRefreshTokenParams struct {
	Token     string
	UserID    uuid.NullUUID
	ExpiresAt sql.NullTime
}

type StoreRefreshTokenRow struct {
	Token     string
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.NullUUID
	ExpiresAt sql.NullTime
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) (StoreRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, storeRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	var i StoreRefreshTokenRow
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
	)
	return i, err
}

const updateSaveData = `-- name: UpdateSaveData :one
UPDATE savedata SET savedata = $2, updated_at = NOW()
WHERE id = $1 AND user_id = $3
RETURNING id, created_at, updated_at, savedata, user_id
`

type UpdateSaveDataParams struct {
	ID       uuid.UUID
	Savedata []byte
	UserID   uuid.UUID
}

func (q *Queries) UpdateSaveData(ctx context.Context, arg UpdateSaveDataParams) (Savedatum, error) {
	row := q.db.QueryRowContext(ctx, updateSaveData, arg.ID, arg.Savedata, arg.UserID)
	var i Savedatum
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Savedata,
		&i.UserID,
	)
	return i, err
}
